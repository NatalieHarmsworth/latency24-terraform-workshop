name: Terraform Plan Apply
description: Runs Terraform Apply or Plan on the specified tfenvname after adding firewall exceptions to the storage account.

inputs:
  tfenvname:
    description: Name of the .tfbackend and .tfvars files to interact with
    default: dev
  apply:
    description: When True, runs terraform apply. When False, runs terraform plan.
    default: "false"

runs:
  using: "composite"
  steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # These values could be kept in the Github secrets, but for the sake of simplicity, we are using a .tfbackend file
    - name: Read .tfbackend
      shell: bash
      run: |
        file="./variables/${{inputs.tfenvname}}.tfbackend"

        while IFS='=' read -r key value || [[ -n "$key" ]]; do
            # Trim whitespace and check if key and value are non-empty
            key=$(echo $key | xargs)
            value=$(echo $value | xargs)
            if [[ ! -z "$key" && ! -z "$value" ]]; then
                echo "Processing: $key=$value"
                export "$key=$value"
            else
                echo "Skipping: $key"
            fi
        done <"$file"

        echo "AZURE_SUBSCRIPTION_ID=$subscription_id" >>$GITHUB_ENV
        echo "AZURE_TENANT_ID=$tenant_id" >>$GITHUB_ENV
        echo "AZURE_CLIENT_ID=$client_id" >>$GITHUB_ENV
        echo "STORAGE_ACCOUNT_NAME=$storage_account_name" >>$GITHUB_ENV

    # We are using OIDC to authenticate to Azure, so there is no client secret to exchange for a token
    - name: Az CLI login
      uses: azure/login@v1
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    # Get the public IP of the runner to add it to the storage account firewall
    - name: Public IP
      shell: bash
      id: ip
      run: echo "ipv4=$(dig -4 +short myip.opendns.com @resolver1.opendns.com)" >> "$GITHUB_OUTPUT"

    - name: Add Storage Firewall Exception
      shell: bash
      run: |
        az storage account network-rule add --subscription ${{ env.AZURE_SUBSCRIPTION_ID}} --account-name ${{ env.STORAGE_ACCOUNT_NAME}} --ip-address '${{steps.ip.outputs.ipv4}}'
        sleep 30
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Plan/apply infrastructure according to Terraform configuration files
    - name: Terraform ${{ inputs.apply == 'true' && 'Apply' || 'Plan' }}
      shell: bash
      run: |
        terraform init -backend-config="variables/${{inputs.tfenvname}}.tfbackend"
        terraform ${{ inputs.apply == 'true' && 'apply -auto-approve' || 'plan' }} -input=false -var-file variables/${{inputs.tfenvname}}.tfvars

    # Remove the firewall exception after the plan/apply, even on failure.
    - name: Remove Storage Firewall Exception
      shell: bash
      if: always()
      run: az storage account network-rule remove --subscription ${{ env.AZURE_SUBSCRIPTION_ID}} --account-name ${{ env.STORAGE_ACCOUNT_NAME}} --ip-address '${{steps.ip.outputs.ipv4}}'